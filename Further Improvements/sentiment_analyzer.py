# -*- coding: utf-8 -*-
"""Sentiment Analyzer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W6P40eMVDIQX06mJC9_U4k60PiCvdbQF
"""

import pandas as pd
import numpy as np
from textblob import TextBlob
import tweepy
import yfinance as yf
from newsapi import NewsApiClient
import datetime

class MarketSentimentAnalyzer:
    def __init__(self, ticker: str, twitter_api_key: str = None, news_api_key: str = None):
        self.ticker = ticker
        self.twitter_api_key = twitter_api_key # I was not able to get one for free
        self.news_api_key = '7b468408067743b89eebad3e9018f624'

    def get_twitter_sentiment(self, days_back: int = 7) -> pd.DataFrame:
        """Collect and analyze Twitter sentiment."""
        if not self.twitter_api_key:
            raise ValueError("Twitter API key is required")

        auth = tweepy.OAuthHandler(self.twitter_api_key)
        api = tweepy.API(auth)

        # Get tweets
        tweets = []
        for tweet in tweepy.Cursor(api.search_tweets, q=f"${self.ticker}", lang="en").items(500):
            tweets.append({
                'date': tweet.created_at,
                'text': tweet.text,
                'likes': tweet.favorite_count,
                'retweets': tweet.retweet_count
            })

        df = pd.DataFrame(tweets)

        # Calculate sentiment
        df['sentiment'] = df['text'].apply(lambda x: TextBlob(x).sentiment.polarity)
        df['weighted_sentiment'] = df['sentiment'] * (df['likes'] + df['retweets'] + 1)

        # Aggregate by date
        daily_sentiment = df.groupby(df['date'].dt.date).agg({
            'weighted_sentiment': 'mean',
            'sentiment': 'mean',
            'text': 'count'
        }).reset_index()

        return daily_sentiment

    def get_news_sentiment(self, days_back: int = 7) -> pd.DataFrame:
        """Collect and analyze news sentiment."""
        if not self.news_api_key:
            raise ValueError("News API key is required")

        newsapi = NewsApiClient(api_key=self.news_api_key)

        # Calculate dates
        end_date = datetime.datetime.now()
        start_date = end_date - datetime.timedelta(days=days_back)

        # Get news articles
        articles = newsapi.get_everything(
            q=f"{self.ticker} OR NVIDIA",
            from_param=start_date.strftime('%Y-%m-%d'),
            to=end_date.strftime('%Y-%m-%d'),
            language='en',
            sort_by='publishedAt'
        )

        if not articles['articles']:
            return pd.DataFrame()

        # Process articles
        news_data = []
        for article in articles['articles']:
            sentiment = TextBlob(f"{article['title']} {article['description']}").sentiment
            news_data.append({
                'date': article['publishedAt'],
                'title': article['title'],
                'sentiment': sentiment.polarity,
                'subjectivity': sentiment.subjectivity
            })

        df = pd.DataFrame(news_data)
        df['date'] = pd.to_datetime(df['date']).dt.date

        # Aggregate by date
        daily_news = df.groupby('date').agg({
            'sentiment': ['mean', 'count', 'std'],
            'subjectivity': 'mean'
        }).reset_index()

        return daily_news

    def get_combined_sentiment(self, days_back: int = 7) -> pd.DataFrame:
        """Combine Twitter and news sentiment with stock data."""
        # Get stock data
        stock = yf.Ticker(self.ticker)
        end_date = datetime.datetime.now()
        start_date = end_date - datetime.timedelta(days=days_back)
        stock_data = stock.history(start=start_date, end=end_date)
        stock_data = stock_data.reset_index()
        stock_data['Date'] = stock_data['Date'].dt.date

        # Get sentiment data
        try:
            twitter_sentiment = self.get_twitter_sentiment(days_back)
            has_twitter = True
        except:
            has_twitter = False

        try:
            news_sentiment = self.get_news_sentiment(days_back)
            has_news = True
        except:
            has_news = False

        # Combine all data
        if has_twitter:
            stock_data = pd.merge(
                stock_data,
                twitter_sentiment,
                left_on='Date',
                right_on='date',
                how='left'
            )

        if has_news:
            stock_data = pd.merge(
                stock_data,
                news_sentiment,
                left_on='Date',
                right_on='date',
                how='left'
            )

        # Fill missing values
        sentiment_cols = [col for col in stock_data.columns if 'sentiment' in col]
        stock_data[sentiment_cols] = stock_data[sentiment_cols].fillna(method='ffill').fillna(0)

        return stock_data

    def calculate_sentiment_indicators(self, data: pd.DataFrame) -> pd.DataFrame:
        """Calculate technical indicators based on sentiment."""
        sentiment_cols = [col for col in data.columns if 'sentiment' in col]

        for col in sentiment_cols:
            # Sentiment moving averages
            data[f'{col}_MA5'] = data[col].rolling(window=5).mean()
            data[f'{col}_MA10'] = data[col].rolling(window=10).mean()

            # Sentiment momentum
            data[f'{col}_momentum'] = data[col] - data[col].shift(1)

            # Sentiment volatility
            data[f'{col}_volatility'] = data[col].rolling(window=5).std()

        return data